{"version":3,"sources":["webpack:///./src/components/Dialogs/OrganizationDialog.js","webpack:///./src/containers/Organizations.js"],"names":["OrganizationDialog","props","_this","classCallCheck_default","this","possibleConstructorReturn_default","getPrototypeOf_default","call","validateInputs","btn","_this$state","state","fieldData","currentStep","_Validation","Validation","isValid","errors","handleSave","setState","handleInputChanged","e","_e$target","target","id","value","objectSpread_default","defineProperty_default","handleSelectChanged","handlePrevious","getStepContent","index","classes","summary","label","name","description","react_default","a","createElement","Grid","container","spacing","item","xs","TextField","fullWidth","error","Boolean","helperText","onChange","rows","multiline","Card","className","variant","dist_es","onDrop","acceptedFiles","console","log","_ref","getRootProps","getInputProps","extends_default","Icon","Typography","gutterBottom","summaryDetails","map","detail","i","key","component","Box","fontWeight","ml","total_users","stakeholders","participants","status","_this2","_this$state2","_this$props","handleClose","Dialog","open","aria-labelledby","DialogTitle","disableTypography","dialogTitle","IconButton","aria-label","closeButton","onClick","Close_default","DialogContent","dividers","Stepper","activeStep","Step","StepLabel","DialogActions","Button","color","dialogActionsCancel","Component","propTypes","PropTypes","object","isRequired","withStyles","theme","margin","padding","position","right","top","palette","grey","marginRight","formControl","marginTop","minWidth","width","& .MuiInputLabel-outlined.MuiInputLabel-shrink","background","common","white","paddingLeft","paddingRight","& h6","& .MuiTypography-root","display","Organization","GridList","gridProperties","dispatch","GetOrganizationList","GetDetails","GetOrganizationDetails","UpdateEntity","handleNewDialog","bool","isOpenDialog","data","GridProperties","grid","search","sort_column","sort_direction","start","limit","columns","sortable","defaultActive","users","surveys","updated","func","formatValue","bind","assertThisInitialized_default","actions","_this3","_this$props$organizat","organization","list","count","activeData","_this$props$entity","entity","Container","disableGutters","maxWidth","type","Fragment","Paper","PageTableWrapper","onGridList","Dialogs_OrganizationDialog","DetailsWrapper","PureComponent","connect","organizationSelector","ContainerWrapper"],"mappings":"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","file":"10.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Dropzone from 'react-dropzone'\nimport Validation from '../../validations/organization'\n\n\n// Material UI Core //\nimport Box from '@material-ui/core/Box'\nimport Grid from '@material-ui/core/Grid'\nimport Step from '@material-ui/core/Step'\nimport Icon from '@material-ui/core/Icon'\nimport Card from '@material-ui/core/Card'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport Stepper from '@material-ui/core/Stepper'\nimport CloseIcon from '@material-ui/icons/Close'\nimport StepLabel from '@material-ui/core/StepLabel'\nimport TextField from '@material-ui/core/TextField'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\nimport MuiDialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogActions from '@material-ui/core/DialogActions'\n\n// Material UI Style //\nimport { withStyles } from '@material-ui/styles'\n\nconst styles = theme => ({\n  dialogTitle: {\n    margin: 0,\n    padding: theme.spacing(2)\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500]\n  },\n  dialogActionsCancel: {\n    marginRight: 'auto'\n  },\n  formControl: {\n    marginTop: theme.spacing(1),\n    minWidth: 120,\n    width: '100%',\n    '& .MuiInputLabel-outlined.MuiInputLabel-shrink': {\n      background: theme.palette.common.white,\n      paddingLeft: '5px',\n      paddingRight: '5px'\n    }\n  },\n  summaryDetails: {\n    '& h6': {\n      paddingLeft: theme.spacing(1)\n    },\n    '& .MuiTypography-root': {\n      display: 'flex',\n    }\n  }\n})\n\n\nclass OrganizationDialog extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n        fieldData: {\n          name: '',\n          description: '',\n          total_users: 50,\n          stakeholders: 20,\n          participants: 25,\n          status: 'Active'\n        },\n        currentStep: 0,\n        errors: {}\n    }\n  }\n  \n  validateInputs = (btn) => {\n    const { fieldData, currentStep } = this.state\n    const { isValid, errors } = Validation(this.state, 'new')\n\n    if (isValid) {\n      if (btn === 'save') {\n        this.props.handleSave(fieldData)\n        return\n      }\n      if (btn === 'next') {\n        this.setState({ currentStep: currentStep + 1 })\n      }\n    } else {\n      this.setState({ errors })\n    }\n\n    return isValid\n  }\n\n  handleInputChanged = (e) => {\n    const { id, value } = e.target\n    this.setState({\n      fieldData: {\n        ...this.state.fieldData,\n        [id]: value\n      }\n    })\n  }\n\n  handleSelectChanged = (e , id) => {\n    const { value } = e.target\n    this.setState({\n      fieldData: {\n        ...this.state.fieldData,\n        [id]: value\n      }\n    })\n  }\n\n  handlePrevious = () => {\n    const { currentStep } = this.state\n    this.setState({ currentStep: currentStep - 1 })\n  }\n\n  getStepContent = (index, fieldData, errors) => {\n    const { classes } = this.props\n    const summary = [\n      {\n        label: 'Organization Name',\n        value: fieldData.name\n      },\n      {\n        label: 'Description',\n        value: fieldData.description\n      },\n      {\n        label: 'Total Users',\n        value: 50\n      },\n      {\n        label: 'Stakeholders',\n        value: 15\n      },\n      {\n        label: 'Participants',\n        value: 45\n      }\n    ]\n\n    switch (index) {\n      case 0:\n        return (\n          <Grid container spacing={1}>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                id='name'\n                label='Name'\n                value={fieldData.name}\n                error={Boolean(errors && errors.name)}\n                helperText={errors ? errors.name : ''}\n                onChange={(e) => this.handleInputChanged(e)}\n              />\n            </Grid>\n            <Grid item xs={12}>\n              <TextField\n                fullWidth\n                rows={4}\n                multiline\n                id='description'\n                label='Description'\n                value={fieldData.description}\n                error={Boolean(errors && errors.description)}\n                helperText={errors ? errors.description : ''}\n                onChange={(e) => this.handleInputChanged(e)}\n              />\n            </Grid>\n          </Grid>\n        )\n      case 1:\n        return (\n          <Card className='reactDropzone' variant='outlined'>\n            <Dropzone onDrop={acceptedFiles => console.log(acceptedFiles)}>\n              {({getRootProps, getInputProps}) => (\n                <section>\n                  <div {...getRootProps()} className='reactDropzone_container'>\n                    <input {...getInputProps()} />\n                    \n                    <Icon>cloud_upload</Icon>\n                    <Typography variant='h6'>\n                      Drag & Drop\n                    </Typography>\n                    <Typography variant='subtitle1' gutterBottom>\n                      Or click here select (.txt, .csv) files\n                    </Typography>\n                    \n                  </div>\n                </section>\n              )}\n            </Dropzone>\n          </Card>\n        )\n      case 2:\n        return (\n          <div className={classes.summaryDetails}>\n            <Typography variant='h6' gutterBottom>Summary</Typography>\n            { summary.map((detail, i) => (\n              <Typography key={i} component='div' >\n                <Box fontWeight='fontWeightMedium' ml={1}>\n                  {detail.label}:\n                </Box>\n                <Box fontWeight='fontWeightRegular' ml={1}>\n                  {detail.value}\n                </Box>\n              </Typography>\n            ))}\n          </div>\n        )\n      default:\n        return\n    }\n  }\n\n\n  render() {\n    const steps = ['1', '2', '3']\n    const { currentStep, fieldData, errors } = this.state\n    const { handleClose, classes } = this.props\n\n    return (\n      <Dialog\n        open={true}\n        fullWidth\n        aria-labelledby='simple-dialog-title'\n      >\n        <MuiDialogTitle disableTypography className={classes.dialogTitle}>\n          <Typography variant='h6'>New Organization</Typography>\n          <IconButton\n            aria-label='close'\n            className={classes.closeButton}\n            onClick={() => handleClose(false)}\n          >\n            <CloseIcon />\n          </IconButton>\n        </MuiDialogTitle>\n        <DialogContent dividers>\n          <Stepper activeStep={currentStep}>\n            {steps.map((label) => {\n              return (\n                <Step key={label}>\n                  <StepLabel></StepLabel>\n                </Step>\n              )\n            })}\n          </Stepper>\n          <div>\n            {this.getStepContent(currentStep, fieldData, errors)}\n          </div>\n        </DialogContent>\n        <DialogActions>\n          <Button \n            color='default'\n            variant='outlined'\n            onClick={() => handleClose(false)}\n            className={classes.dialogActionsCancel} >\n            Cancel\n          </Button>\n          {\n            currentStep !== 0\n            && (\n              <Button onClick={() => this.handlePrevious()} color='primary' variant='outlined'>\n                Previous\n              </Button>\n            )\n          }\n          {\n            currentStep !== 2\n            && (\n              <Button onClick={() => this.validateInputs('next')} color='primary' variant='contained'>\n                Next\n              </Button>\n            )\n          }\n          {\n            currentStep === 2\n            && (\n              <Button onClick={() => this.validateInputs('save')} color='primary' variant='contained'>\n                Save\n              </Button>\n            )\n          }\n        </DialogActions>\n      </Dialog>\n    )\n  }\n}\n\nOrganizationDialog.propTypes = {\n  classes: PropTypes.object.isRequired\n}\n\nexport default withStyles(styles)(OrganizationDialog)","import React, { PureComponent } from 'react'\nimport { connect } from 'react-redux'\nimport _ from 'lodash'\n\n// Material UI Core //\nimport Icon from '@material-ui/core/Icon'\nimport Paper from '@material-ui/core/Paper'\nimport Button from '@material-ui/core/Button'\nimport Container from '@material-ui/core/Container'\n\nimport { organizationSelector } from '../redux/selectors'\n\n// Dialogs //\nimport OrganizationDialog from '../components/Dialogs/OrganizationDialog'\n\n// Wrappers //\nimport DetailsWrapper from '../App/hocs/DetailsWrapper'\nimport ContainerWrapper from '../App/hocs/ContainerWrapper'\nimport PageTableWrapper from '../App/hocs/PageTableWrapper'\nimport {\n\tGetOrganizationList,\n\tGetOrganizationDetails,\n\tUpdateEntity\n} from '../redux/actions'\n\nclass Organization extends PureComponent {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      isOpenDialog: false\n    }\n\n\t\tthis.GridProperties = {\n\t\t\tgrid: true,\n\t\t\tsearch: '',\n\t\t\tsort_column: 'name',\n\t\t\tsort_direction: 'desc',\n\t\t\tstart: 0,\n\t\t\tlimit: 10\n\t\t}\n\n\t\tthis.columns = {\n\t\t\tname: { name: 'Name', sortable: true, defaultActive: true},\n\t\t\tusers: { name: 'Users', sortable: true},\n\t\t\tsurveys: { name: 'Surveys', sortable: true},\n\t\t\tstatus: { name: 'Status', sortable: true},\n\t\t\tupdated: { name: 'Updated', func: this.formatValue.bind(this, 'updated'), sortable: true},\n\t\t\tactions: {\n\t\t\t\tname: 'Actions',\n\t\t\t\tfunc: this.formatValue.bind(this, 'actions')\n\t\t\t}\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.GridList(this.GridProperties)\n\t}\n\n\tGridList = (gridProperties) => {\n\t\tthis.props.dispatch(GetOrganizationList(gridProperties))\n\t}\n\n\tGetDetails = (id) => {\n\t\tthis.props.dispatch(GetOrganizationDetails(id))\n\t\tthis.props.dispatch(UpdateEntity('organization'))\n\t}\n\n\tformatValue(key, item) {\n\t\tif (key === 'actions') {\n\t\t\treturn (\n\t\t\t\t<Icon\n\t\t\t\t\tonClick={() => this.GetDetails(item.id)}\n\t\t\t\t>remove_red_eye</Icon>\n\t\t\t)\n\t\t}\n\t\tif (key === 'updated') {\n\t\t\treturn <span>{item[key]}</span>\n\t\t}\n\t}\n\n\thandleNewDialog = (bool) => {\n\t\tthis.setState({\n\t\t\tisOpenDialog: bool\n\t\t})\n\t}\n\n\thandleSave = (data) => {\n\t\tthis.setState({\n\t\t\tisOpenDialog: false\n\t\t}, () => {\n\t\t\tconsole.log('dispatching..')\n\t\t\t// dispatch here\n\t\t\t// example below:\n\t\t\t// dispatch(CreateUser(data))\n\t\t})\n\t}\n\n\trender() {\n    const { isOpenDialog } = this.state\n\t\tconst { organization: { list: { data, count } }, activeData, entity = 'organization' } = this.props\n\n    return (\n\t\t\t<Container disableGutters={true} maxWidth={false}>\n          {\n            activeData.type === 'parent'\n            ? (\n              <>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\t\t\t\tonClick={() => this.handleNewDialog(true)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tNew Organization\n\t\t\t\t\t\t\t\t</Button>\n                <Paper className='MuiPaper-tableWrapper'>\n                  <PageTableWrapper\n\t\t\t\t\t\t\t\t\t\trows={data}\n\t\t\t\t\t\t\t\t\t\tcount={count}\n\t\t\t\t\t\t\t\t\t\tcolumns={this.columns}\n\t\t\t\t\t\t\t\t\t\tgridProperties={this.GridProperties}\n\t\t\t\t\t\t\t\t\t\tonGridList={this.GridList}\n                  />\n                  {\n                    isOpenDialog ?\n                    <OrganizationDialog \n                      handleSave={this.handleSave}\n                      handleClose={this.handleNewDialog}\n                    /> : null\n                  }\n                </Paper>\n              </>\n            )\n            : (\n              <DetailsWrapper\n                data={activeData}\n                entity={entity}\n              />\n            )\n          }\n        </Container>\n    )\n  }\n}\n\nexport default connect(organizationSelector)(ContainerWrapper(Organization))"],"sourceRoot":""}
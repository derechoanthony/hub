{"version":3,"sources":["webpack:///./src/components/Dialogs/SurveyDialog.js","webpack:///./src/containers/Surveys.js"],"names":["SurveyDialog","props","_this","classCallCheck_default","this","possibleConstructorReturn_default","getPrototypeOf_default","call","validateInputs","fieldData","state","_Validation","Validation","isValid","errors","handleSave","setState","handleInputChanged","e","_e$target","target","id","value","objectSpread_default","defineProperty_default","handleSelectChanged","title","organization","description","status","_this2","_this$state","_this$props","handleClose","classes","react_default","a","createElement","Dialog","open","fullWidth","aria-labelledby","DialogTitle","disableTypography","className","dialogTitle","Typography","variant","IconButton","aria-label","closeButton","onClick","Close_default","DialogContent","dividers","Fragment","Grid","container","spacing","item","xs","TextField","required","label","error","Boolean","helperText","onChange","FormControl","InputLabel","Select","MenuProps","MenuItem","FormHelperText","multiline","rows","DialogActions","Button","color","dialogActionsCancel","Component","propTypes","PropTypes","object","isRequired","withStyles","theme","margin","padding","position","right","top","palette","grey","marginRight","formControl","marginTop","minWidth","width","& .MuiInputLabel-outlined.MuiInputLabel-shrink","background","common","white","paddingLeft","paddingRight","Survey","GridList","gridProperties","dispatch","GetSurveyList","GetDetails","GetSurveyDetails","handleNewDialog","bool","isOpenDialog","data","console","log","GridProperties","grid","search","sort_column","sort_direction","start","limit","columns","name","sortable","defaultActive","question","participants","reports","updated","actions","func","formatValue","bind","assertThisInitialized_default","key","Icon","_this3","_this$props$survey$li","survey","list","count","activeData","Container","disableGutters","maxWidth","type","Paper","PageTableWrapper","onGridList","Dialogs_SurveyDialog","DetailsWrapper","entity","PureComponent","connect","surveySelector","ContainerWrapper"],"mappings":"oeAqDMA,cACJ,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,IAAAC,KAAAJ,IACjBE,EAAAG,IAAAD,KAAAE,IAAAN,GAAAO,KAAAH,KAAMH,KAaRO,eAAiB,WAAM,IACbC,EAAcP,EAAKQ,MAAnBD,UADaE,EAEOC,YAAWH,EAAW,OAA1CI,EAFaF,EAEbE,QAASC,EAFIH,EAEJG,OAQjB,OANID,EACFX,EAAKD,MAAMc,WAAWN,GAEtBP,EAAKc,UAAWF,WAGXD,GAxBUX,EA2BnBe,mBAAqB,SAACC,GAAM,IAAAC,EACJD,EAAEE,OAAhBC,EADkBF,EAClBE,GAAIC,EADcH,EACdG,MACZpB,EAAKc,UACHP,UAAWc,OACNrB,EAAKQ,MAAMD,UADPe,OAENH,EAAKC,OAhCOpB,EAqCnBuB,oBAAsB,SAACP,EAAIG,GAAO,IACxBC,EAAUJ,EAAEE,OAAZE,MACRpB,EAAKc,UACHP,UAAWc,OACNrB,EAAKQ,MAAMD,UADPe,OAENH,EAAKC,OAvCVpB,EAAKQ,OACDD,WACEiB,MAAO,GACPC,aAAc,GACdC,YAAa,GACbC,OAAQ,UAEVf,WAVaZ,wDAgDV,IAAA4B,EAAA1B,KAAA2B,EACuB3B,KAAKM,MAA3BD,EADDsB,EACCtB,UAAWK,EADZiB,EACYjB,OADZkB,EAE0B5B,KAAKH,MAA9BgC,EAFDD,EAECC,YAAaC,EAFdF,EAEcE,QAErB,OACEC,EAAAC,EAAAC,cAACC,EAAA,GACCC,MAAM,EACNC,WAAS,EACTC,kBAAgB,uBAEhBN,EAAAC,EAAAC,cAACK,EAAA,GAAeC,mBAAiB,EAACC,UAAWV,EAAQW,aACnDV,EAAAC,EAAAC,cAACS,EAAA,GAAWC,QAAQ,MAApB,cACAZ,EAAAC,EAAAC,cAACW,EAAA,GACCC,aAAW,QACXL,UAAWV,EAAQgB,YACnBC,QAAS,kBAAMlB,GAAY,KAE3BE,EAAAC,EAAAC,cAACe,EAAAhB,EAAD,QAGJD,EAAAC,EAAAC,cAACgB,EAAA,GAAcC,UAAQ,GACrBnB,EAAAC,EAAAC,cAAAF,EAAAC,EAAAmB,SAAA,KACEpB,EAAAC,EAAAC,cAACmB,EAAA,GAAKC,WAAS,EAACC,QAAS,GACvBvB,EAAAC,EAAAC,cAACmB,EAAA,GAAKG,MAAI,EAACC,GAAI,GACbzB,EAAAC,EAAAC,cAACwB,EAAA,GACCC,UAAQ,EACRzC,GAAG,QACHmB,WAAS,EACTuB,MAAM,QACNzC,MAAOb,EAAUiB,MACjBsC,MAAOC,QAAQnD,GAAUA,EAAOY,OAChCwC,WAAYpD,EAASA,EAAOY,MAAQ,GACpCyC,SAAU,SAACjD,GAAD,OAAOY,EAAKb,mBAAmBC,OAG7CiB,EAAAC,EAAAC,cAACmB,EAAA,GAAKG,MAAI,EAACC,GAAI,GACfzB,EAAAC,EAAAC,cAAC+B,EAAA,GACCN,UAAQ,EACRtB,WAAS,EACTI,UAAW,GACXoB,MAAOC,QAAQnD,GAAUA,EAAOa,eAChCQ,EAAAC,EAAAC,cAACgC,EAAA,EAAD,wBACAlC,EAAAC,EAAAC,cAACiC,EAAA,GACCjD,GAAG,eACHkD,UAAW,GACXjD,MAAOb,EAAUkB,aACjBwC,SAAU,SAACjD,GAAD,OAAOY,EAAKL,oBAAoBP,EAAG,kBAE7CiB,EAAAC,EAAAC,cAACmC,EAAA,GAASlD,MAAO,6BAAjB,6BACAa,EAAAC,EAAAC,cAACmC,EAAA,GAASlD,MAAO,SAAjB,uBAEFa,EAAAC,EAAAC,cAACoC,EAAA,EAAD,KAAiB3D,EAASA,EAAOa,aAAe,MAGlDQ,EAAAC,EAAAC,cAACmB,EAAA,GAAKG,MAAI,EAACC,GAAI,IACbzB,EAAAC,EAAAC,cAACwB,EAAA,GACCC,UAAQ,EACRY,WAAS,EACTlC,WAAS,EACTmC,KAAM,EACNtD,GAAG,cACH0C,MAAM,cACNzC,MAAOb,EAAUmB,YACjBoC,MAAOC,QAAQnD,GAAUA,EAAOc,aAChCsC,WAAYpD,EAASA,EAAOc,YAAc,GAC1CuC,SAAU,SAACjD,GAAD,OAAOY,EAAKb,mBAAmBC,UAMnDiB,EAAAC,EAAAC,cAACuC,EAAA,EAAD,KACEzC,EAAAC,EAAAC,cAACwC,EAAA,GACCC,MAAM,UACN/B,QAAQ,WACRI,QAAS,kBAAMlB,GAAY,IAC3BW,UAAWV,EAAQ6C,qBAJrB,UAOA5C,EAAAC,EAAAC,cAACwC,EAAA,GAAO1B,QAAS,kBAAMrB,EAAKtB,kBAAkBsE,MAAM,UAAU/B,QAAQ,aAAtE,iBAhIiBiC,aAyI3BhF,EAAaiF,WACX/C,QAASgD,IAAUC,OAAOC,YAGbC,kBAxKA,SAAAC,GAAK,OAClBzC,aACE0C,OAAQ,EACRC,QAASF,EAAM5B,QAAQ,IAEzBR,aACEuC,SAAU,WACVC,MAAOJ,EAAM5B,QAAQ,GACrBiC,IAAKL,EAAM5B,QAAQ,GACnBoB,MAAOQ,EAAMM,QAAQC,KAAK,MAE5Bd,qBACEe,YAAa,QAEfC,aACEC,UAAWV,EAAM5B,QAAQ,GACzBuC,SAAU,IACVC,MAAO,OACPC,kDACEC,WAAYd,EAAMM,QAAQS,OAAOC,MACjCC,YAAa,MACbC,aAAc,UAmJLnB,CAAmBrF,sCCzK5ByG,cACJ,SAAAA,EAAYxG,GAAO,IAAAC,EAAA,OAAAC,IAAAC,KAAAqG,IACjBvG,EAAAG,IAAAD,KAAAE,IAAAmG,GAAAlG,KAAAH,KAAMH,KAiCTyG,SAAW,SAACC,GACXzG,EAAKD,MAAM2G,SAASC,YAAcF,KAnCfzG,EAsCpB4G,WAAa,SAACzF,GACbnB,EAAKD,MAAM2G,SAASG,YAAiB1F,KAvClBnB,EAoDpB8G,gBAAkB,SAACC,GAClB/G,EAAKc,UACJkG,aAAcD,KAtDI/G,EA0DpBa,WAAa,SAACoG,GACbjH,EAAKc,UACJkG,cAAc,GACZ,WACFE,QAAQC,IAAI,oBA3DXnH,EAAKQ,OACHwG,cAAc,GAGlBhH,EAAKoH,gBACJC,MAAM,EACNC,OAAQ,GACRC,YAAa,OACbC,eAAgB,OAChBC,MAAO,EACPC,MAAO,IAGR1H,EAAK2H,SACJlG,cAAgBmG,KAAM,qBAAsBC,UAAU,EAAMC,eAAe,GAC3EC,UAAYH,KAAM,WAAYC,UAAU,GACxCG,cAAgBJ,KAAM,eAAgBC,UAAU,GAChDlG,QAAUiG,KAAM,SAAUC,UAAU,GACjCI,SAAWL,KAAM,UAAWC,UAAU,GACtCK,SAAWN,KAAM,UAAWC,UAAU,GACzCM,SACCP,KAAM,UACNQ,KAAMpI,EAAKqI,YAAYC,KAAjBC,IAAAvI,GAA4B,aAzBjBA,mEA+BnBE,KAAKsG,SAAStG,KAAKkH,oDAWRoB,EAAK/E,GAAM,IAAA7B,EAAA1B,KACtB,GAAY,YAARsI,EACH,OACCvG,EAAAC,EAAAC,cAACsG,EAAA,GACAxF,QAAS,kBAAMrB,EAAKgF,WAAWnD,EAAKtC,MADrC,mDAwBM,IAAAuH,EAAAxI,KACE8G,EAAiB9G,KAAKM,MAAtBwG,aADFlF,EAEoD5B,KAAKH,MAFzD4I,EAAA7G,EAEE8G,OAAUC,KAAQ5B,EAFpB0B,EAEoB1B,KAAM6B,EAF1BH,EAE0BG,MAAWC,EAFrCjH,EAEqCiH,WAC3C,OACD9G,EAAAC,EAAAC,cAAC6G,EAAA,GAAUC,gBAAgB,EAAMC,UAAU,GAEd,WAApBH,EAAWI,KAETlH,EAAAC,EAAAC,cAAAF,EAAAC,EAAAmB,SAAA,KACNpB,EAAAC,EAAAC,cAACwC,EAAA,GACAC,MAAM,UACN/B,QAAQ,YACRI,QAAS,kBAAMyF,EAAK5B,iBAAgB,KAHrC,cAOQ7E,EAAAC,EAAAC,cAACiH,EAAA,GAAM1G,UAAU,yBACfT,EAAAC,EAAAC,cAACkH,EAAA,GACT5E,KAAMwC,EACN6B,MAAOA,EACPnB,QAASzH,KAAKyH,QACdlB,eAAgBvG,KAAKkH,eACrBkC,WAAYpJ,KAAKsG,WAGLQ,EACA/E,EAAAC,EAAAC,cAACoH,GACC1I,WAAYX,KAAKW,WACjBkB,YAAa7B,KAAK4G,kBACf,OAMb7E,EAAAC,EAAAC,cAACqH,EAAA,GACCvC,KAAM8B,EACNU,OAAO,mBA3GFC,iBAoHNC,sBAAQC,IAARD,CAAwBE,YAAiBtD","file":"11.js","sourcesContent":["import React, { Component } from 'react'\nimport PropTypes from 'prop-types'\nimport Validation from '../../validations/survey'\n\n\n// Material UI Core //\nimport Grid from '@material-ui/core/Grid'\nimport Button from '@material-ui/core/Button'\nimport Dialog from '@material-ui/core/Dialog'\nimport Select from '@material-ui/core/Select'\nimport CloseIcon from '@material-ui/icons/Close'\nimport MenuItem from '@material-ui/core/MenuItem'\nimport TextField from '@material-ui/core/TextField'\nimport InputLabel from '@material-ui/core/InputLabel'\nimport IconButton from '@material-ui/core/IconButton'\nimport Typography from '@material-ui/core/Typography'\nimport FormControl from '@material-ui/core/FormControl'\nimport MuiDialogTitle from '@material-ui/core/DialogTitle'\nimport DialogContent from '@material-ui/core/DialogContent'\nimport DialogActions from '@material-ui/core/DialogActions'\nimport FormHelperText from '@material-ui/core/FormHelperText'\n\n\n// Material UI Style //\nimport { withStyles } from '@material-ui/styles'\n\nconst styles = theme => ({\n  dialogTitle: {\n    margin: 0,\n    padding: theme.spacing(2)\n  },\n  closeButton: {\n    position: 'absolute',\n    right: theme.spacing(1),\n    top: theme.spacing(1),\n    color: theme.palette.grey[500]\n  },\n  dialogActionsCancel: {\n    marginRight: 'auto'\n  },\n  formControl: {\n    marginTop: theme.spacing(1),\n    minWidth: 120,\n    width: '100%',\n    '& .MuiInputLabel-outlined.MuiInputLabel-shrink': {\n      background: theme.palette.common.white,\n      paddingLeft: '5px',\n      paddingRight: '5px'\n    }\n  }\n})\n\n\nclass SurveyDialog extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n        fieldData: {\n          title: '',\n          organization: '',\n          description: '',\n          status: 'Active'\n        },\n        errors: {}\n    }\n  }\n  \n  validateInputs = () => {\n    const { fieldData } = this.state\n    const { isValid, errors } = Validation(fieldData, 'new')\n\n    if (isValid) {\n      this.props.handleSave(fieldData)\n    } else {\n      this.setState({ errors })\n    }\n\n    return isValid\n  }\n\n  handleInputChanged = (e) => {\n    const { id, value } = e.target\n    this.setState({\n      fieldData: {\n        ...this.state.fieldData,\n        [id]: value\n      }\n    })\n  }\n\n  handleSelectChanged = (e , id) => {\n    const { value } = e.target\n    this.setState({\n      fieldData: {\n        ...this.state.fieldData,\n        [id]: value\n      }\n    })\n  }\n\n\n  render() {\n    const { fieldData, errors } = this.state\n    const { handleClose, classes } = this.props\n\n    return (\n      <Dialog\n        open={true}\n        fullWidth\n        aria-labelledby='simple-dialog-title'\n      >\n        <MuiDialogTitle disableTypography className={classes.dialogTitle}>\n          <Typography variant='h6'>New Survey</Typography>\n          <IconButton\n            aria-label='close'\n            className={classes.closeButton}\n            onClick={() => handleClose(false)}\n          >\n            <CloseIcon />\n          </IconButton>\n        </MuiDialogTitle>\n        <DialogContent dividers>\n          <>\n            <Grid container spacing={2}>  \n              <Grid item xs={6}>\n                <TextField\n                  required\n                  id='title'\n                  fullWidth\n                  label='Title'\n                  value={fieldData.title}\n                  error={Boolean(errors && errors.title)}\n                  helperText={errors ? errors.title : ''}\n                  onChange={(e) => this.handleInputChanged(e)}\n                />\n              </Grid>\n              <Grid item xs={6}>\n              <FormControl \n                required\n                fullWidth\n                className={''}\n                error={Boolean(errors && errors.organization)}>\n                <InputLabel>Type of Inquiry</InputLabel>\n                <Select\n                  id='organization'\n                  MenuProps={''}\n                  value={fieldData.organization}\n                  onChange={(e) => this.handleSelectChanged(e, 'organization')}\n                >\n                  <MenuItem value={'world_health_organization'}>World Health Organization</MenuItem>\n                  <MenuItem value={'other'}>Other Organization</MenuItem>\n                </Select>\n                <FormHelperText>{errors ? errors.organization : ''}</FormHelperText>\n              </FormControl>\n            </Grid>\n              <Grid item xs={12}>\n                <TextField\n                  required\n                  multiline\n                  fullWidth\n                  rows={4}\n                  id='description'\n                  label='Description'\n                  value={fieldData.description}\n                  error={Boolean(errors && errors.description)}\n                  helperText={errors ? errors.description : ''}\n                  onChange={(e) => this.handleInputChanged(e)}\n                />\n              </Grid>\n            </Grid>\n           </>\n        </DialogContent>\n        <DialogActions>\n          <Button \n            color='default'\n            variant='outlined'\n            onClick={() => handleClose(false)}\n            className={classes.dialogActionsCancel} >\n            Cancel\n          </Button>\n          <Button onClick={() => this.validateInputs()} color='primary' variant='contained'>\n            Save\n          </Button>\n        </DialogActions>\n      </Dialog>\n    )\n  }\n}\n\nSurveyDialog.propTypes = {\n  classes: PropTypes.object.isRequired\n}\n\nexport default withStyles(styles)(SurveyDialog)","import React, { PureComponent } from 'react'\nimport { connect } from 'react-redux'\nimport _ from 'lodash'\n\n// Material UI Core //\nimport Icon from '@material-ui/core/Icon'\nimport Paper from '@material-ui/core/Paper'\nimport Button from '@material-ui/core/Button'\nimport Container from '@material-ui/core/Container'\n\n// selector\nimport { surveySelector } from '../redux/selectors'\n\n// Dialogs //\nimport SurveyDialog from '../components/Dialogs/SurveyDialog'\n\n// Wrappers //\nimport DetailsWrapper from '../App/hocs/DetailsWrapper'\nimport ContainerWrapper from '../App/hocs/ContainerWrapper'\nimport PageTableWrapper from '../App/hocs/PageTableWrapper'\nimport {\n\tGetSurveyList,\n\tGetSurveyDetails\n} from '../redux/actions'\n\nclass Survey extends PureComponent {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n      isOpenDialog: false\n    }\n\n\t\tthis.GridProperties = {\n\t\t\tgrid: true,\n\t\t\tsearch: '',\n\t\t\tsort_column: 'name',\n\t\t\tsort_direction: 'desc',\n\t\t\tstart: 0,\n\t\t\tlimit: 10\n\t\t}\n\n\t\tthis.columns = {\n\t\t\torganization: { name: 'Title/Organization', sortable: true, defaultActive: true},\n\t\t\tquestion: { name: 'Question', sortable: true},\n\t\t\tparticipants: { name: 'Participants', sortable: true},\n\t\t\tstatus: { name: 'Status', sortable: true},\n      reports: { name: 'Reports', sortable: true},\n      updated: { name: 'Updated', sortable: true},\n\t\t\tactions: {\n\t\t\t\tname: 'Actions',\n\t\t\t\tfunc: this.formatValue.bind(this, 'actions')\n\t\t\t}\n\t\t}\n\t}\n\n\tcomponentDidMount() {\n\t\tthis.GridList(this.GridProperties)\n\t}\n\n\tGridList = (gridProperties) => {\n\t\tthis.props.dispatch(GetSurveyList(gridProperties))\n\t}\n\n\tGetDetails = (id) => {\n\t\tthis.props.dispatch(GetSurveyDetails(id))\n\t}\n\n\tformatValue(key, item) {\n\t\tif (key === 'actions') {\n\t\t\treturn (\n\t\t\t\t<Icon\n\t\t\t\t\tonClick={() => this.GetDetails(item.id)}\n\t\t\t\t>remove_red_eye</Icon>\n\t\t\t)\n\t\t}\n\t}\n\n\thandleNewDialog = (bool) => {\n\t\tthis.setState({\n\t\t\tisOpenDialog: bool\n\t\t})\n\t}\n\n\thandleSave = (data) => {\n\t\tthis.setState({\n\t\t\tisOpenDialog: false\n\t\t}, () => {\n\t\t\tconsole.log('dispatching..')\n\t\t\t// dispatch here\n\t\t\t// example below:\n\t\t\t// dispatch(CreateSurvey(data))\n\t\t})\n\t}\n\n\trender() {\n    const { isOpenDialog } = this.state\n    const { survey: { list: { data, count } }, activeData } = this.props\n    return (\n\t\t\t<Container disableGutters={true} maxWidth={false}>\n          {\n            activeData.type === 'parent'\n            ? (\n              <>\n\t\t\t\t\t\t\t\t<Button\n\t\t\t\t\t\t\t\t\tcolor='primary'\n\t\t\t\t\t\t\t\t\tvariant='contained'\n\t\t\t\t\t\t\t\t\tonClick={() => this.handleNewDialog(true)}\n\t\t\t\t\t\t\t\t>\n\t\t\t\t\t\t\t\t\tNew Survey\n\t\t\t\t\t\t\t\t</Button>\n                <Paper className='MuiPaper-tableWrapper'>\n                  <PageTableWrapper\n\t\t\t\t\t\t\t\t\t\trows={data}\n\t\t\t\t\t\t\t\t\t\tcount={count}\n\t\t\t\t\t\t\t\t\t\tcolumns={this.columns}\n\t\t\t\t\t\t\t\t\t\tgridProperties={this.GridProperties}\n\t\t\t\t\t\t\t\t\t\tonGridList={this.GridList}\n                  />\n                  {\n                      isOpenDialog ?\n                      <SurveyDialog \n                        handleSave={this.handleSave}\n                        handleClose={this.handleNewDialog}\n                      /> : null\n                  }\n                </Paper>\n              </>\n            )\n            : (\n              <DetailsWrapper\n                data={activeData}\n                entity='survey'\n              />\n            )\n          }\n        </Container>\n    )\n  }\n}\n\nexport default connect(surveySelector)(ContainerWrapper(Survey))"],"sourceRoot":""}